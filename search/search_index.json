{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Witnet ecosystem! \u00b6 Witnet's mission is to enable a network of computers to act as a \"decentralized oracle\" that retrieves, attests and delivers information in behalf of smart contracts in a tamper-resistant way. This Decentralized Oracle Network (DON) maintains and distributes a block chain data structure that serves as a common ledger for the operation of the protocol as well as for the wit token, which is central for incentivizing the network players to abide by the protocol and make them liable for any misbehavior. \u2014 Witnet Whitepaper Active network participants earn wit tokens for fulfilling the data retrieval, attestation and delivery tasks coming from different smart contract platforms such as Ethereum . Software ecosystem \u00b6 Witnet-rust \u00b6 Witnet-rust is the first open-source implementation of the Witnet protocol and leverages the Rust programming language to achieve utmost speed, memory safety and fearless concurrency without compromising on performance. Witnet-Rust is experimental software running on experimental network protocols: All the main components are in place\u2014but they need yet to be battle tested before mainnet. Testnet-3 is live. Here's the roadmap and this is how to run a node . The Witnet community is doing its best to make witnet-rust rock solid as soon as possible. Contributions are more than welcome. Sheikah \u00b6 Sheikah is a Witnet-compatible desktop wallet, data requests and smart contracts development environment. Ethereum Bridge \u00b6 The Ethereum Bridge is the component in charge of relaying data requests from Ethereum into Witnet and then communicating the results back to the originating contracts. The bridge is actually three different pieces of software: The UsingWitnet Solidity contract that Ethereum developers can extend ( contract MyContract is UsingWitnet { ... } ). The Witnet Bridge Interface (WBI): an Ethereum contract where data requests are publicly posted to. The bridge component inside Witnet-Rust, which monitors the WBI for new requests and also scans Social ecosystem \u00b6 Node operators, a.k.a. Witnesses \u00b6 The Witnet blockchain is free, open, and neutral. That is, everyone is welcome to run their own node. Every node maintains the history of all the transactions on the blockchain. Additionally, every node in the Witnet network can participate in witnessing , i.e. earning wit tokens in exchange of retrieving, aggregating and delivering data points from public APIs into smart contracts. Developers \u00b6 The Witnet ecosystem welcomes developers of all kind of backgrounds: from people who contribute to Witnet-Rust or Sheikah to those who want to connect their Ethereum smart contracts to external APIs. Developers can: Build Witnet clients. Build applications to interact with a Witnet client. Write Ethereum smart contracts that use Witnet. Contribute to Witnet-Rust or Sheikah. Witnet Foundation \u00b6 Witnet Foundation is the entity currently in charge of funding the development of Witnet-Rust and Sheikah, as well as fostering the thriving ecosystem around the Witnet protocol.","title":"Ecosystem"},{"location":"#welcome-to-the-witnet-ecosystem","text":"Witnet's mission is to enable a network of computers to act as a \"decentralized oracle\" that retrieves, attests and delivers information in behalf of smart contracts in a tamper-resistant way. This Decentralized Oracle Network (DON) maintains and distributes a block chain data structure that serves as a common ledger for the operation of the protocol as well as for the wit token, which is central for incentivizing the network players to abide by the protocol and make them liable for any misbehavior. \u2014 Witnet Whitepaper Active network participants earn wit tokens for fulfilling the data retrieval, attestation and delivery tasks coming from different smart contract platforms such as Ethereum .","title":"Welcome to the Witnet ecosystem!"},{"location":"#software-ecosystem","text":"","title":"Software ecosystem"},{"location":"#witnet-rust","text":"Witnet-rust is the first open-source implementation of the Witnet protocol and leverages the Rust programming language to achieve utmost speed, memory safety and fearless concurrency without compromising on performance. Witnet-Rust is experimental software running on experimental network protocols: All the main components are in place\u2014but they need yet to be battle tested before mainnet. Testnet-3 is live. Here's the roadmap and this is how to run a node . The Witnet community is doing its best to make witnet-rust rock solid as soon as possible. Contributions are more than welcome.","title":"Witnet-rust"},{"location":"#sheikah","text":"Sheikah is a Witnet-compatible desktop wallet, data requests and smart contracts development environment.","title":"Sheikah"},{"location":"#ethereum-bridge","text":"The Ethereum Bridge is the component in charge of relaying data requests from Ethereum into Witnet and then communicating the results back to the originating contracts. The bridge is actually three different pieces of software: The UsingWitnet Solidity contract that Ethereum developers can extend ( contract MyContract is UsingWitnet { ... } ). The Witnet Bridge Interface (WBI): an Ethereum contract where data requests are publicly posted to. The bridge component inside Witnet-Rust, which monitors the WBI for new requests and also scans","title":"Ethereum Bridge"},{"location":"#social-ecosystem","text":"","title":"Social ecosystem"},{"location":"#node-operators-aka-witnesses","text":"The Witnet blockchain is free, open, and neutral. That is, everyone is welcome to run their own node. Every node maintains the history of all the transactions on the blockchain. Additionally, every node in the Witnet network can participate in witnessing , i.e. earning wit tokens in exchange of retrieving, aggregating and delivering data points from public APIs into smart contracts.","title":"Node operators, a.k.a. Witnesses"},{"location":"#developers","text":"The Witnet ecosystem welcomes developers of all kind of backgrounds: from people who contribute to Witnet-Rust or Sheikah to those who want to connect their Ethereum smart contracts to external APIs. Developers can: Build Witnet clients. Build applications to interact with a Witnet client. Write Ethereum smart contracts that use Witnet. Contribute to Witnet-Rust or Sheikah.","title":"Developers"},{"location":"#witnet-foundation","text":"Witnet Foundation is the entity currently in charge of funding the development of Witnet-Rust and Sheikah, as well as fostering the thriving ecosystem around the Witnet protocol.","title":"Witnet Foundation"},{"location":"community/contributing/","text":"Contributing to Witnet \u00b6 Thank you for joining the Witnet community and showing interest in making your first contribution! The following is a set of guidelines and helpful pointers for contributing to Witnet. The keyword here is guidelines , not rules. As such, use your best judgement and feel free to propose changes to even this document. Code of conduct \u00b6 Everyone participating in this project is governed by the Witnet Code of Conduct . By participating, you are expected to uphold this code as well. I just have a question \u00b6 Please don't file an issue with questions.It's easier for you and for us if you go directly to our Discord server or Telegram group , since it will keep our repositories clean and you will get a faster response. How can I contribute? \u00b6 Find an area you can help with and do it. Open source is about collaboration and open participation. Try to make your code look like what already exists and submit a pull request on GitHub . The list of issues is a good place to start, especially the ones tagged as \" good first issue \" or \"help wanted\" (but don't let that stop you from looking at others). If you're looking for additional ideas, try to search TODO comments for suggestions on minor to major improvements. grep is your friend. Pull requests adding more tests or documentation are rewarded with an immense amount of positive karma. Reporting bugs \u00b6 This section guides you through submitting a bug report. This helps contributors and maintainers understand your report, reproduce the behavior, and in turn squash the bug. Before submitting a bug report, please make sure that you've searched through the issues and that there isn't already an issue describing the same issue you are having. How do I submit a good bug report? \u00b6 Bugs are tracked as GitHub issues . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Provide specific examples to demonstrate the steps. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Post a screenshot or a dump of the console when possible and suitable. If the problem wasn't triggered by a specific action, describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of Witnet-rust? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Are you running witnet-rust from a pre-compiled binary or from the source code? What's your operating system and version? Suggesting enhancements \u00b6 This section guides you through submitting an enhancement suggestion, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion. Before creating enhancement suggestions, please double check that there is not already an existing feature suggestion for your feature, as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible. How Do I Submit A Good Enhancement Suggestion? \u00b6 Enhancement suggestions are tracked as GitHub issues. Create an issue on that repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps. Include copy/pasteable snippets which you use in those examples, as Markdown code blocks. Describe the current behavior and explain which behavior you expected to see instead and why. Explain why this enhancement would be useful to most users and isn't something that can or should be implemented as a community package. Your First Code Contribution \u00b6 Unsure where to begin contributing? You can start by looking through these good first issue issues: Good first issue - issues which should only require a few lines of code, and a test or two. Sending a Pull Request \u00b6 Commit messages convention \u00b6 We use a commit message convention to make our commit history easier to understand for everyone and allow for automatic generation of changelogs. Examples These are some examples of good commit messages: feat(mining): use a random nonce as input in mint transactions BREAKING CHANGE: former mint transactions containing no inputs will be rendered invalid refactor(config): make `config` actor return settings as `Option`s docs : add RADON ` FLOAT_TOSTRING ` opcode this operator converts any floating point number into a UTF8 string chore(cargo): upgrade `actix` to version 0.8.1 fix #503 PGP-signing your commits \u00b6 All commits in the Witnet project repositories need to be signed by their authors using PGP. Tip To configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above, run git config commit.gpgsign true . To sign all commits by default in any local repository on your computer, run git config --global commit.gpgsign true . To store your GPG key passphrase so you don't have to enter it every time you sign a commit, we recommend using the following tools: For Mac users, the GPG Suite allows you to store your GPG key passphrase in the Mac OS Keychain. For Windows users, the Gpg4win integrates with other Windows tools. You can also manually configure gpg-agent to save your GPG key passphrase, but this doesn't integrate with Mac OS Keychain like ssh-agent and requires more setup. If you have multiple keys or are attempting to sign commits or tags with a key that doesn't match your committer identity, you should tell Git about your signing key .","title":"Contributing"},{"location":"community/contributing/#contributing-to-witnet","text":"Thank you for joining the Witnet community and showing interest in making your first contribution! The following is a set of guidelines and helpful pointers for contributing to Witnet. The keyword here is guidelines , not rules. As such, use your best judgement and feel free to propose changes to even this document.","title":"Contributing to Witnet"},{"location":"community/contributing/#code-of-conduct","text":"Everyone participating in this project is governed by the Witnet Code of Conduct . By participating, you are expected to uphold this code as well.","title":"Code of conduct"},{"location":"community/contributing/#i-just-have-a-question","text":"Please don't file an issue with questions.It's easier for you and for us if you go directly to our Discord server or Telegram group , since it will keep our repositories clean and you will get a faster response.","title":"I just have a question"},{"location":"community/contributing/#how-can-i-contribute","text":"Find an area you can help with and do it. Open source is about collaboration and open participation. Try to make your code look like what already exists and submit a pull request on GitHub . The list of issues is a good place to start, especially the ones tagged as \" good first issue \" or \"help wanted\" (but don't let that stop you from looking at others). If you're looking for additional ideas, try to search TODO comments for suggestions on minor to major improvements. grep is your friend. Pull requests adding more tests or documentation are rewarded with an immense amount of positive karma.","title":"How can I contribute?"},{"location":"community/contributing/#reporting-bugs","text":"This section guides you through submitting a bug report. This helps contributors and maintainers understand your report, reproduce the behavior, and in turn squash the bug. Before submitting a bug report, please make sure that you've searched through the issues and that there isn't already an issue describing the same issue you are having.","title":"Reporting bugs"},{"location":"community/contributing/#how-do-i-submit-a-good-bug-report","text":"Bugs are tracked as GitHub issues . Explain the problem and include additional details to help maintainers reproduce the problem: Use a clear and descriptive title for the issue to identify the problem. Describe the exact steps which reproduce the problem in as many details as possible. Provide specific examples to demonstrate the steps. Include links to files or GitHub projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use Markdown code blocks. Describe the behavior you observed after following the steps and point out what exactly is the problem with that behavior. Explain which behavior you expected to see instead and why. Post a screenshot or a dump of the console when possible and suitable. If the problem wasn't triggered by a specific action, describe what you were doing before the problem happened and share more information using the guidelines below. Provide more context by answering these questions: Did the problem start happening recently (e.g. after updating to a new version) or was this always a problem? If the problem started happening recently, can you reproduce the problem in an older version of Witnet-rust? What's the most recent version in which the problem doesn't happen? Can you reliably reproduce the issue? If not, provide details about how often the problem happens and under which conditions it normally happens. Are you running witnet-rust from a pre-compiled binary or from the source code? What's your operating system and version?","title":"How do I submit a good bug report?"},{"location":"community/contributing/#suggesting-enhancements","text":"This section guides you through submitting an enhancement suggestion, including completely new features and minor improvements to existing functionality. Following these guidelines helps maintainers and the community understand your suggestion. Before creating enhancement suggestions, please double check that there is not already an existing feature suggestion for your feature, as you might find out that you don't need to create one. When you are creating an enhancement suggestion, please include as many details as possible.","title":"Suggesting enhancements"},{"location":"community/contributing/#how-do-i-submit-a-good-enhancement-suggestion","text":"Enhancement suggestions are tracked as GitHub issues. Create an issue on that repository and provide the following information: Use a clear and descriptive title for the issue to identify the suggestion. Provide a step-by-step description of the suggested enhancement in as many details as possible. Provide specific examples to demonstrate the steps. Include copy/pasteable snippets which you use in those examples, as Markdown code blocks. Describe the current behavior and explain which behavior you expected to see instead and why. Explain why this enhancement would be useful to most users and isn't something that can or should be implemented as a community package.","title":"How Do I Submit A Good Enhancement Suggestion?"},{"location":"community/contributing/#your-first-code-contribution","text":"Unsure where to begin contributing? You can start by looking through these good first issue issues: Good first issue - issues which should only require a few lines of code, and a test or two.","title":"Your First Code Contribution"},{"location":"community/contributing/#sending-a-pull-request","text":"","title":"Sending a Pull Request"},{"location":"community/contributing/#commit-messages-convention","text":"We use a commit message convention to make our commit history easier to understand for everyone and allow for automatic generation of changelogs. Examples These are some examples of good commit messages: feat(mining): use a random nonce as input in mint transactions BREAKING CHANGE: former mint transactions containing no inputs will be rendered invalid refactor(config): make `config` actor return settings as `Option`s docs : add RADON ` FLOAT_TOSTRING ` opcode this operator converts any floating point number into a UTF8 string chore(cargo): upgrade `actix` to version 0.8.1 fix #503","title":"Commit messages convention"},{"location":"community/contributing/#pgp-signing-your-commits","text":"All commits in the Witnet project repositories need to be signed by their authors using PGP. Tip To configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above, run git config commit.gpgsign true . To sign all commits by default in any local repository on your computer, run git config --global commit.gpgsign true . To store your GPG key passphrase so you don't have to enter it every time you sign a commit, we recommend using the following tools: For Mac users, the GPG Suite allows you to store your GPG key passphrase in the Mac OS Keychain. For Windows users, the Gpg4win integrates with other Windows tools. You can also manually configure gpg-agent to save your GPG key passphrase, but this doesn't integrate with Mac OS Keychain like ssh-agent and requires more setup. If you have multiple keys or are attempting to sign commits or tags with a key that doesn't match your committer identity, you should tell Git about your signing key .","title":"PGP-signing your commits"},{"location":"community/roadmap/","text":"Community Roadmap \u00b6 Witnet is an open initiative and Witnet-Rust and Sheikah are open source projects that are under development by an open community of organizations and independent developers. This means that no one can set the roadmap unilaterally. During the pre-mainnet phase, a subsequent testnet release is expected every to months, and each of them is a hard fork and full reset of the chain: [ Testnet-1 ] Jan 2019: basic protocol capabilities [ Testnet-2 ] Mar 2019: security and scalability improvements [ Testnet-3 ] May 2019: algorithmic reputation system [ Testnet-4 ] Jul 2019: Ethereum bridge [ Testnet-5 ] Sep 2019: mainnet readiness Given the experimental nature of the technologies and network protocols under development, these dates and deliverables may be subject to change due to reasons beyond the control of Witnet Foundation.","title":"Roadmap"},{"location":"community/roadmap/#community-roadmap","text":"Witnet is an open initiative and Witnet-Rust and Sheikah are open source projects that are under development by an open community of organizations and independent developers. This means that no one can set the roadmap unilaterally. During the pre-mainnet phase, a subsequent testnet release is expected every to months, and each of them is a hard fork and full reset of the chain: [ Testnet-1 ] Jan 2019: basic protocol capabilities [ Testnet-2 ] Mar 2019: security and scalability improvements [ Testnet-3 ] May 2019: algorithmic reputation system [ Testnet-4 ] Jul 2019: Ethereum bridge [ Testnet-5 ] Sep 2019: mainnet readiness Given the experimental nature of the technologies and network protocols under development, these dates and deliverables may be subject to change due to reasons beyond the control of Witnet Foundation.","title":"Community Roadmap"},{"location":"interfaces/cli/","text":"","title":"Command Line Interface"},{"location":"interfaces/json-rpc/","text":"","title":"Json rpc"},{"location":"interfaces/wallet-api/","text":"","title":"Wallet API"},{"location":"learn/concepts/","text":"Key Concepts \u00b6 The Witnet protocol, as outlined by the Witnet Whitepaper , allows a network of computers to act as a \"decentralized oracle\" that retrieves, attests and delivers information to smart contracts without having to place trust in a single entity. Wait, what? Ok, lets go one step at a time. Smart Contracts Are Not What You Think \u00b6 Over the last years, blockchain technology has promised to revolutionize business by allowing creation of \"smart contracts\" that, unlike paper contracts, are impossible to breach. Actually, those smart contracts are nothing more than small programs that can be run in a trustless manner. That is: once they are created, no one can stop them from doing exactly what they were created for. They just obey their own source code, and censorship is just impossible. This is a really powerful idea. If you can write a smart contract that: implements the logic of an agreement, and can execute the clauses of the contract on its own (like paying Alice or Bob depending on the outcome of some event), then you have a contract that is capable of enforcing itself and leaves no room for contestation. Boom . Blockchain Oracles, And Their Problem \u00b6 Given that smart contracts need to be completely deterministic 1 , they do not support input of data from non-deterministic sources such as APIs or websites. As a result, smart contracts are mostly isolated from the rest of the Internet, which dramatically reduces their transformative potential. At the end of the day, the output of a program does not depend solely on its source code, but also on the input data it operates upon. Of course, as the creator of a smart contract, you can create a method that allows you and only you to act as an \"oracle\" by introducing information from the outside at will. But you would be completely breaking the trustless nature of a smart contract. If trust is put in a single entity, there you have a single point of failure that can easily be hacked or corrupted. Smart contracts connected to the real world will not be completely trustless and will not release their full potential until we have ways to feed them information trustlessly. This is often called \"the oracle problem\" . The Solution: A Decentralized Oracle Network \u00b6 The Witnet protocol aims to create an overlay network that connects smart contracts to any online data source. Sport results, stock prices, weather forecasts or even other blockchains can be easily queried (preferably through APIs). The protocol describes a distributed network of peer nodes\u2014which we fondly call witnesses \u2014who earn Wit tokens as a reward for retrieving web data and reporting it directly to the smart contracts. The bottom line is that a considerable number of randomly selected, anonymous peers retrieving information from one or more sources can converge into a single truth about the data they retrieved if a majority of them are incentivized to report the retrieved data honestly and they apply a common consensus algorithm that resolves inconsistencies. This Decentralized Oracle Network (DON) maintains and distributes a block chain data structure that serves as a common ledger for the operation of the protocol as well as for the wit token, which is central to incentivizing the network players to abide by the protocol and make them liable for any misbehavior. Witnesses are also in charge of validating transactions in the network and bundling them into blocks that get appended to the blockchain periodically. The process by which witnesses retrieve, attest and deliver data in behalf of the smart contracts is in some way similar to mining in other blockchains. However, fulfilling these tasks and collecting the rewards is not that expensive in terms of computation. The protocol has been conceived to ensure utmost decentralization and fairnes, so each witness' weight in the network is not aligned to their computing power. Instead, the probability for every witness to be assigned tasks or mine new blocks is directly proportional to their past performance in terms of honesty: their reputation. Tip Of course, the so-called miners are not actual human beings sitting in front of a computer, fulfilling assignments coming from an Internet overlord that commands them to use their web browser to navigate to a certain website and take a snapshot or copy some text that they must report. Indeed, the miners are just computers running a software (Witnet-rust) that automatically receive and execute a series of tasks without the owner of the computer having to actively do anything else than installing it. 100% Truth, 0% Trust \u00b6 Data retrieved, attested and delivered using the Witnet protocol is reliable not because of authority but because it comes from anonymous nodes who are incentivized to remain honest and to compete for rewards. In addition, integrity of this data is guaranteed by a consensus algorithm that detects fraudsters, who are immediately punished. The progressive reputation protocol plays a central role in maintaining every participant active and honest by creating short, middle and long term incentives for them to abide by the protocol and not to tamper with the data they broker. Info Please note that Witnet's aim is not spotting fake data, but guaranteeing a 1:1 match between what is published online\u2014regardless of its truthness\u2014and the data that is eventually delivered the smart contracts. Otherwise, the contracts could have totally different output values when executed across all the nodes maintaining the blockchain, therefore causing inconsistencies that would lead to breaking the network consensus. \u21a9","title":"Key Concepts"},{"location":"learn/concepts/#key-concepts","text":"The Witnet protocol, as outlined by the Witnet Whitepaper , allows a network of computers to act as a \"decentralized oracle\" that retrieves, attests and delivers information to smart contracts without having to place trust in a single entity. Wait, what? Ok, lets go one step at a time.","title":"Key Concepts"},{"location":"learn/concepts/#smart-contracts-are-not-what-you-think","text":"Over the last years, blockchain technology has promised to revolutionize business by allowing creation of \"smart contracts\" that, unlike paper contracts, are impossible to breach. Actually, those smart contracts are nothing more than small programs that can be run in a trustless manner. That is: once they are created, no one can stop them from doing exactly what they were created for. They just obey their own source code, and censorship is just impossible. This is a really powerful idea. If you can write a smart contract that: implements the logic of an agreement, and can execute the clauses of the contract on its own (like paying Alice or Bob depending on the outcome of some event), then you have a contract that is capable of enforcing itself and leaves no room for contestation. Boom .","title":"Smart Contracts Are Not What You Think"},{"location":"learn/concepts/#blockchain-oracles-and-their-problem","text":"Given that smart contracts need to be completely deterministic 1 , they do not support input of data from non-deterministic sources such as APIs or websites. As a result, smart contracts are mostly isolated from the rest of the Internet, which dramatically reduces their transformative potential. At the end of the day, the output of a program does not depend solely on its source code, but also on the input data it operates upon. Of course, as the creator of a smart contract, you can create a method that allows you and only you to act as an \"oracle\" by introducing information from the outside at will. But you would be completely breaking the trustless nature of a smart contract. If trust is put in a single entity, there you have a single point of failure that can easily be hacked or corrupted. Smart contracts connected to the real world will not be completely trustless and will not release their full potential until we have ways to feed them information trustlessly. This is often called \"the oracle problem\" .","title":"Blockchain Oracles, And Their Problem"},{"location":"learn/concepts/#the-solution-a-decentralized-oracle-network","text":"The Witnet protocol aims to create an overlay network that connects smart contracts to any online data source. Sport results, stock prices, weather forecasts or even other blockchains can be easily queried (preferably through APIs). The protocol describes a distributed network of peer nodes\u2014which we fondly call witnesses \u2014who earn Wit tokens as a reward for retrieving web data and reporting it directly to the smart contracts. The bottom line is that a considerable number of randomly selected, anonymous peers retrieving information from one or more sources can converge into a single truth about the data they retrieved if a majority of them are incentivized to report the retrieved data honestly and they apply a common consensus algorithm that resolves inconsistencies. This Decentralized Oracle Network (DON) maintains and distributes a block chain data structure that serves as a common ledger for the operation of the protocol as well as for the wit token, which is central to incentivizing the network players to abide by the protocol and make them liable for any misbehavior. Witnesses are also in charge of validating transactions in the network and bundling them into blocks that get appended to the blockchain periodically. The process by which witnesses retrieve, attest and deliver data in behalf of the smart contracts is in some way similar to mining in other blockchains. However, fulfilling these tasks and collecting the rewards is not that expensive in terms of computation. The protocol has been conceived to ensure utmost decentralization and fairnes, so each witness' weight in the network is not aligned to their computing power. Instead, the probability for every witness to be assigned tasks or mine new blocks is directly proportional to their past performance in terms of honesty: their reputation. Tip Of course, the so-called miners are not actual human beings sitting in front of a computer, fulfilling assignments coming from an Internet overlord that commands them to use their web browser to navigate to a certain website and take a snapshot or copy some text that they must report. Indeed, the miners are just computers running a software (Witnet-rust) that automatically receive and execute a series of tasks without the owner of the computer having to actively do anything else than installing it.","title":"The Solution: A Decentralized Oracle Network"},{"location":"learn/concepts/#100-truth-0-trust","text":"Data retrieved, attested and delivered using the Witnet protocol is reliable not because of authority but because it comes from anonymous nodes who are incentivized to remain honest and to compete for rewards. In addition, integrity of this data is guaranteed by a consensus algorithm that detects fraudsters, who are immediately punished. The progressive reputation protocol plays a central role in maintaining every participant active and honest by creating short, middle and long term incentives for them to abide by the protocol and not to tamper with the data they broker. Info Please note that Witnet's aim is not spotting fake data, but guaranteeing a 1:1 match between what is published online\u2014regardless of its truthness\u2014and the data that is eventually delivered the smart contracts. Otherwise, the contracts could have totally different output values when executed across all the nodes maintaining the blockchain, therefore causing inconsistencies that would lead to breaking the network consensus. \u21a9","title":"100% Truth, 0% Trust"},{"location":"learn/glossary/","text":"Glossary \u00b6 Conditional payment : a Witnet transaction encumbered with a small program that defines how, when and by whom the enclosed value can be spent. Conditional payments can consume data coming from Witnet data requests, so they can be used to trigger release of funds upon the result of real world events without having to resort to more complex, stateful, turing-complete smart contracts. Data request : a digital document declaring one or more data sources and how data coming from those sources can be normalized and combined together in order to present it as a single data point to be consumed by other programs. Decentralized network : an overlay network in which multiple untrusted computers have been set to communicate with each other as peers using a network protocol, with the purpose of fulfilling some common utility, without any of them having prominent or absolute control over the network and without chance for anyone to disrupt the functioning of the network. Oracle : an entity providing smart contracts with information from outside their containing network. Tamper resistance is the main point of smart contracts, so they should only employ decentralized oracles in which they do not need to trust the messenger . Otherwise, the oracle entity would become a single point of failure . Smart contract : a deterministic computer program with a high degree of resistance to tampering and censorship due to its concurrent execution by a decentralized network of processors owned by untrusted parties whose incentives deter them from colluding to alter the output of the program.","title":"Glossary"},{"location":"learn/glossary/#glossary","text":"Conditional payment : a Witnet transaction encumbered with a small program that defines how, when and by whom the enclosed value can be spent. Conditional payments can consume data coming from Witnet data requests, so they can be used to trigger release of funds upon the result of real world events without having to resort to more complex, stateful, turing-complete smart contracts. Data request : a digital document declaring one or more data sources and how data coming from those sources can be normalized and combined together in order to present it as a single data point to be consumed by other programs. Decentralized network : an overlay network in which multiple untrusted computers have been set to communicate with each other as peers using a network protocol, with the purpose of fulfilling some common utility, without any of them having prominent or absolute control over the network and without chance for anyone to disrupt the functioning of the network. Oracle : an entity providing smart contracts with information from outside their containing network. Tamper resistance is the main point of smart contracts, so they should only employ decentralized oracles in which they do not need to trust the messenger . Otherwise, the oracle entity would become a single point of failure . Smart contract : a deterministic computer program with a high degree of resistance to tampering and censorship due to its concurrent execution by a decentralized network of processors owned by untrusted parties whose incentives deter them from colluding to alter the output of the program.","title":"Glossary"},{"location":"protocol/blocks/","text":"","title":"Blocks"},{"location":"protocol/data-requests/","text":"","title":"Data requests"},{"location":"protocol/reputation/","text":"Reputation System \u00b6","title":"Reputation System"},{"location":"protocol/reputation/#reputation-system","text":"","title":"Reputation System"},{"location":"protocol/serialization/","text":"","title":"Serialization"},{"location":"protocol/sortition/","text":"","title":"Sortition"},{"location":"protocol/transactions/","text":"","title":"Transactions"},{"location":"try/my-first-data-request/","text":"Create a Data Request \u00b6","title":"Create a Data Request"},{"location":"try/my-first-data-request/#create-a-data-request","text":"","title":"Create a Data Request"},{"location":"try/run-a-node/","text":"Running a Node in the Witnet Testnet \u00b6 The Witnet testnet is open for anyone to join and test it by running their own full node. Running a node on the Witnet mainnet is not possible before the mainnet is released. Check out the roadmap and save the dates! Tip You do not need to run a Witnet node to use Witnet from your Ethereum smart contracts. If you are a smart contracts developer, what you probably want is to use Witnet from Solidity . Using Docker \u00b6 The most convenient method for running a Witnet node is through the witnet/witnet-rust Docker image. This docker image downloads and runs a witnet-rust node in the latest testnet in just a matter on seconds. If that's exactly what you want, you can just run this and enjoy: docker run -it witnet/witnet-rust latest node server How to enable persistence \u00b6 Be careful though, as running the image without mounting any volumes may cause total loss of data (including private keys and thus any mined wits). Luckily, enabling persistence is super easy: docker run \\ -v ~/.witnet-rust-testnet-3:/.witnet-rust-testnet-3 \\ -it witnet/witnet-rust latest node server How to run specific releases \u00b6 Specific versions or releases can be simply run form the the same image: docker run \\ -v ~/.witnet-rust-testnet-3:/.witnet-rust-testnet-3 \\ -it witnet/witnet-rust 0 .3.2 node server How to execute CLI commands on the running node \u00b6 First you need to get the CONTAINER ID or NAME of the running node with: docker ps Then, you can run CLI commands on the running node with this simple one-liner. In this example, it will show the latest blocks in the chain: docker exec -i <container_id> ./witnet node blockchain Debug mode \u00b6 Debug mode shows more info on what is happening under the hood. It is activated with the --debug flag in the right place: docker run -it witnet/witnet-rust latest --debug node server Passing the RUST_LOG=witnet=debug environment flag does the same: docker run \\ -e RUST_LOG = witnet = debug \\ -it witnet/witnet-rust latest node server","title":"Run a Node"},{"location":"try/run-a-node/#running-a-node-in-the-witnet-testnet","text":"The Witnet testnet is open for anyone to join and test it by running their own full node. Running a node on the Witnet mainnet is not possible before the mainnet is released. Check out the roadmap and save the dates! Tip You do not need to run a Witnet node to use Witnet from your Ethereum smart contracts. If you are a smart contracts developer, what you probably want is to use Witnet from Solidity .","title":"Running a Node in the Witnet Testnet"},{"location":"try/run-a-node/#using-docker","text":"The most convenient method for running a Witnet node is through the witnet/witnet-rust Docker image. This docker image downloads and runs a witnet-rust node in the latest testnet in just a matter on seconds. If that's exactly what you want, you can just run this and enjoy: docker run -it witnet/witnet-rust latest node server","title":"Using Docker"},{"location":"try/run-a-node/#how-to-enable-persistence","text":"Be careful though, as running the image without mounting any volumes may cause total loss of data (including private keys and thus any mined wits). Luckily, enabling persistence is super easy: docker run \\ -v ~/.witnet-rust-testnet-3:/.witnet-rust-testnet-3 \\ -it witnet/witnet-rust latest node server","title":"How to enable persistence"},{"location":"try/run-a-node/#how-to-run-specific-releases","text":"Specific versions or releases can be simply run form the the same image: docker run \\ -v ~/.witnet-rust-testnet-3:/.witnet-rust-testnet-3 \\ -it witnet/witnet-rust 0 .3.2 node server","title":"How to run specific releases"},{"location":"try/run-a-node/#how-to-execute-cli-commands-on-the-running-node","text":"First you need to get the CONTAINER ID or NAME of the running node with: docker ps Then, you can run CLI commands on the running node with this simple one-liner. In this example, it will show the latest blocks in the chain: docker exec -i <container_id> ./witnet node blockchain","title":"How to execute CLI commands on the running node"},{"location":"try/run-a-node/#debug-mode","text":"Debug mode shows more info on what is happening under the hood. It is activated with the --debug flag in the right place: docker run -it witnet/witnet-rust latest --debug node server Passing the RUST_LOG=witnet=debug environment flag does the same: docker run \\ -e RUST_LOG = witnet = debug \\ -it witnet/witnet-rust latest node server","title":"Debug mode"},{"location":"try/use-from-ethereum/","text":"Using Witnet from Ethereum / Solidity \u00b6","title":"Using Witnet from Ethereum"},{"location":"try/use-from-ethereum/#using-witnet-from-ethereum-solidity","text":"","title":"Using Witnet from Ethereum / Solidity"}]}